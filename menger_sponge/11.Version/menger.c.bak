/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   menger.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: asplavni <asplavni@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/04/12 15:30:00 by asplavni          #+#    #+#             */
/*   Updated: 2024/04/12 15:30:00 by asplavni         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "fractol.h"
#include <math.h>
#include <stdlib.h>

// Function to create and initialize a new BVH node
static t_bvh_node *create_bvh_node(t_aabb bounds, int is_leaf, int iteration)
{
    t_bvh_node *node = (t_bvh_node *)malloc(sizeof(t_bvh_node));
    if (!node)
        return (NULL);
    
    node->bounds = bounds;
    node->left = NULL;
    node->right = NULL;
    node->is_leaf = is_leaf;
    node->iteration = iteration;
    
    return (node);
}

// Recursive function to build a BVH for the Menger sponge
t_bvh_node *build_menger_bvh_recursive(t_aabb bounds, int current_iter, int max_iter)
{
    // Base case: if we've reached the maximum iterations or we're at depth 0
    if (current_iter <= 0)
    {
        return create_bvh_node(bounds, 1, current_iter);
    }
    
    t_bvh_node *node = create_bvh_node(bounds, 0, current_iter);
    if (!node)
        return (NULL);
    
    // Calculate dimensions of the current box
    double width = bounds.max.x - bounds.min.x;
    
    // Size of sub-cubes
    double sub_size = width / 3.0;
    
    // Create child nodes (skipping the middle "holes")
    int created_children = 0;
    int added_nodes = 0;
    
    // Process all 27 potential sub-cubes (3x3x3 grid)
    for (int x = 0; x < 3; x++)
    {
        for (int y = 0; y < 3; y++)
        {
            for (int z = 0; z < 3; z++)
            {
                // Skip the "holes" in the Menger sponge (centers of faces and center of cube)
                if ((x == 1 && y == 1) || (x == 1 && z == 1) || (y == 1 && z == 1))
                    continue;
                
                // Calculate bounds for this sub-cube
                t_aabb sub_bounds;
                sub_bounds.min.x = bounds.min.x + x * sub_size;
                sub_bounds.min.y = bounds.min.y + y * sub_size;
                sub_bounds.min.z = bounds.min.z + z * sub_size;
                
                sub_bounds.max.x = sub_bounds.min.x + sub_size;
                sub_bounds.max.y = sub_bounds.min.y + sub_size;
                sub_bounds.max.z = sub_bounds.min.z + sub_size;
                
                // Recursively build a BVH for this sub-cube (with decreased iteration)
                t_bvh_node *child = build_menger_bvh_recursive(sub_bounds, current_iter - 1, max_iter);
                
                if (child)
                {
                    added_nodes++;
                    
                    // For simplicity in BVH structure, just add first two children
                    // to form a binary tree
                    if (!node->left)
                    {
                        node->left = child;
                        created_children++;
                    }
                    else if (!node->right && created_children < 2)
                    {
                        node->right = child;
                        created_children++;
                    }
                    
                    // Stop after adding 2 children (for binary tree)
                    if (created_children >= 2)
                        continue;
                }
            }
        }
    }
    
    // If we didn't add any children (shouldn't happen normally), make this a leaf
    if (added_nodes == 0)
    {
        node->is_leaf = 1;
    }
    
    return node;
}

// Main function to build the BVH
t_bvh_node *build_menger_bvh(int max_iterations)
{
    t_aabb bounds;
    bounds.min = (t_vec3){-1.0, -1.0, -1.0};
    bounds.max = (t_vec3){1.0, 1.0, 1.0};
    
    return build_menger_bvh_recursive(bounds, max_iterations, max_iterations);
}

// Free the BVH tree
void free_bvh(t_bvh_node *node)
{
    if (!node)
        return;
    
    free_bvh(node->left);
    free_bvh(node->right);
    free(node);
}

// Ray-AABB intersection test
int ray_intersect_aabb(t_aabb bounds, t_vec3 ray_origin, t_vec3 ray_dir, 
                      double *t_min, double *t_max)
{
    // Initialize to extreme values
    double t_near = -INFINITY;
    double t_far = INFINITY;
    
    // Epsilon for handling near-zero ray directions
    double epsilon = 1e-6;
    
    // Check each dimension (x, y, z)
    // X dimension check
    if (fabs(ray_dir.x) < epsilon) {
        // Ray is parallel to the slab, check if ray origin is within slab
        if (ray_origin.x < bounds.min.x || ray_origin.x > bounds.max.x)
            return 0;
    } else {
        // Compute intersection distances
        double inv_dir = 1.0 / ray_dir.x;
        double t1 = (bounds.min.x - ray_origin.x) * inv_dir;
        double t2 = (bounds.max.x - ray_origin.x) * inv_dir;
        
        // Ensure t1 is the near intersection and t2 is the far one
        if (t1 > t2) {
            double temp = t1;
            t1 = t2;
            t2 = temp;
        }
        
        // Update the min/max intersection distances
        if (t1 > t_near) t_near = t1;
        if (t2 < t_far) t_far = t2;
        
        // Early rejection test
        if (t_near > t_far || t_far < 0)
            return 0;
    }
    
    // Y dimension check
    if (fabs(ray_dir.y) < epsilon) {
        if (ray_origin.y < bounds.min.y || ray_origin.y > bounds.max.y)
            return 0;
    } else {
        double inv_dir = 1.0 / ray_dir.y;
        double t1 = (bounds.min.y - ray_origin.y) * inv_dir;
        double t2 = (bounds.max.y - ray_origin.y) * inv_dir;
        
        if (t1 > t2) {
            double temp = t1;
            t1 = t2;
            t2 = temp;
        }
        
        if (t1 > t_near) t_near = t1;
        if (t2 < t_far) t_far = t2;
        
        if (t_near > t_far || t_far < 0)
            return 0;
    }
    
    // Z dimension check
    if (fabs(ray_dir.z) < epsilon) {
        if (ray_origin.z < bounds.min.z || ray_origin.z > bounds.max.z)
            return 0;
    } else {
        double inv_dir = 1.0 / ray_dir.z;
        double t1 = (bounds.min.z - ray_origin.z) * inv_dir;
        double t2 = (bounds.max.z - ray_origin.z) * inv_dir;
        
        if (t1 > t2) {
            double temp = t1;
            t1 = t2;
            t2 = temp;
        }
        
        if (t1 > t_near) t_near = t1;
        if (t2 < t_far) t_far = t2;
        
        if (t_near > t_far || t_far < 0)
            return 0;
    }
    
    // If we got here, there's a valid intersection
    *t_min = t_near;
    *t_max = t_far;
    
    return 1;
}

// Ray-BVH intersection test (recursive)
int ray_intersect_bvh(t_bvh_node *node, t_vec3 ray_origin, t_vec3 ray_dir,
                     double *t_min, double *t_max)
{
    if (!node)
        return 0;
    
    // Check if ray intersects the node's bounding box
    double node_tmin, node_tmax;
    if (!ray_intersect_aabb(node->bounds, ray_origin, ray_dir, &node_tmin, &node_tmax))
        return 0;
    
    // If this is a leaf node, we've found an intersection
    if (node->is_leaf)
    {
        // Use slightly larger t_min to avoid z-fighting and precision issues
        // This helps with thin surfaces causing striping
        *t_min = node_tmin + 0.0001;
        *t_max = node_tmax;
        return 1;
    }
    
    // Check both children and find closest intersection
    double left_tmin = INFINITY, left_tmax = -INFINITY;
    double right_tmin = INFINITY, right_tmax = -INFINITY;
    int hit_left = 0, hit_right = 0;
    
    // First check left child
    if (node->left)
        hit_left = ray_intersect_bvh(node->left, ray_origin, ray_dir, &left_tmin, &left_tmax);
    
    // Then check right child
    if (node->right)
        hit_right = ray_intersect_bvh(node->right, ray_origin, ray_dir, &right_tmin, &right_tmax);
    
    // Find closest hit
    if (hit_left && hit_right)
    {
        // Take the closest of the two intersections
        *t_min = (left_tmin < right_tmin) ? left_tmin : right_tmin;
        *t_max = (left_tmax > right_tmax) ? left_tmax : right_tmax;
        return 1;
    }
    else if (hit_left)
    {
        *t_min = left_tmin;
        *t_max = left_tmax;
        return 1;
    }
    else if (hit_right)
    {
        *t_min = right_tmin;
        *t_max = right_tmax;
        return 1;
    }
    
    return 0;
}

void	init_3d(t_fractal *fractal)
{
	fractal->is_3d = 1;
	// Position camera to see the entire structure
	fractal->camera.position = (t_vec3){2.0, 2.0, -3.0};
	// Look toward the origin
	fractal->camera.rotation = (t_vec3){-0.6, 0.6, 0.0};
	// Use a wider FOV to see more of the scene
	fractal->camera.fov = 60.0;
	fractal->camera.aspect_ratio = (double)WIDTH / HEIGHT;
	fractal->camera.near = 0.1;
	fractal->camera.far = 20.0;

	// Default Menger sponge settings
	fractal->menger.iterations = 1;  // Start with 1 iteration (can be increased)
	fractal->menger.size = 1.0;
	fractal->menger.position = (t_vec3){0, 0, 0};
	fractal->menger.rotation = (t_vec3){0, 0, 0};
	
	// Build the BVH for the Menger sponge
	fractal->menger.bvh_root = build_menger_bvh(fractal->menger.iterations);
	if (!fractal->menger.bvh_root)
		printf("Warning: Failed to build BVH for Menger sponge\n");
	
	// Set a reasonable default resolution factor for performance
	fractal->resolution_factor = 4;
}

t_vec3	rotate_point(t_vec3 point, t_vec3 rotation)
{
	t_vec3	result;
	double	cos_x, sin_x, cos_y, sin_y, cos_z, sin_z;
	t_vec3  temp;
	
	cos_x = cos(rotation.x);
	sin_x = sin(rotation.x);
	cos_y = cos(rotation.y);
	sin_y = sin(rotation.y);
	cos_z = cos(rotation.z);
	sin_z = sin(rotation.z);

	// Rotate around X axis
	temp.x = point.x;
	temp.y = point.y * cos_x - point.z * sin_x;
	temp.z = point.y * sin_x + point.z * cos_x;

	// Rotate around Y axis
	result.x = temp.x * cos_y + temp.z * sin_y;
	result.y = temp.y;
	result.z = -temp.x * sin_y + temp.z * cos_y;

	// Rotate around Z axis (using result as input)
	temp = result;
	result.x = temp.x * cos_z - temp.y * sin_z;
	result.y = temp.x * sin_z + temp.y * cos_z;
	result.z = temp.z;

	return (result);
}

void	project_point(t_vec3 point, t_fractal *fractal, int *x, int *y)
{
	double	scale;
	double	fov_rad;

	fov_rad = fractal->camera.fov * M_PI / 180.0;
	scale = tan(fov_rad / 2.0);

	point.x = point.x / (point.z * scale);
	point.y = point.y / (point.z * scale * fractal->camera.aspect_ratio);

	*x = (int)((point.x + 1.0) * WIDTH / 2.0);
	*y = (int)((1.0 - point.y) * HEIGHT / 2.0);
}

// The is_menger_iteration function is not used anymore with BVH
// So we include it only if specifically needed for debugging
#ifdef DEBUG
// Simple check if a point is inside a cube
static int is_point_in_cube(t_vec3 point)
{
    return (fabs(point.x) < 1.0 && 
            fabs(point.y) < 1.0 && 
            fabs(point.z) < 1.0);
}

// Check if a given position should be part of the Menger sponge
static int is_menger_iteration(t_vec3 point, int iterations)
{
    int i, j, k;
    int iter;
    
    // Base case: a full cube
    if (iterations <= 0)
        return (is_point_in_cube(point));
    
    // Check each iteration of the fractal
    for (iter = 0; iter < iterations; iter++)
    {
        // Scale the coordinates
        double x = fabs(point.x) * 3.0;
        double y = fabs(point.y) * 3.0;
        double z = fabs(point.z) * 3.0;
        
        // Check if we're in one of the cut-out sections
        i = (int)floor(x) % 3;
        j = (int)floor(y) % 3;
        k = (int)floor(z) % 3;
        
        if (i == 1 && j == 1) return 0;
        if (i == 1 && k == 1) return 0;
        if (j == 1 && k == 1) return 0;
        
        // Rescale for next iteration
        point.x = fmod(x, 1.0);
        point.y = fmod(y, 1.0);
        point.z = fmod(z, 1.0);
    }
    
    return 1;
}
#endif

void	render_menger_sponge(t_fractal *fractal)
{
	int		x, y;
	t_vec3	ray_dir;
	t_vec3	ray_pos;
	double	t_min, t_max;
	int		color;
    int     resolution_factor = fractal->resolution_factor;

    // Safety check - ensure we're in 3D mode and it's actually the Menger sponge
    if (!fractal->is_3d || ft_strncmp(fractal->name, "menger", 6) != 0)
        return;

    // Clear the image first
    y = 0;
    while (y < HEIGHT)
    {
        x = 0;
        while (x < WIDTH)
        {
            pixel_put(x, y, &fractal->img, BLACK);
            x++;
        }
        y++;
    }
    // Show black screen first to indicate processing
    draw_image_to_window(fractal);

	y = 0;
	while (y < HEIGHT)
	{
		x = 0;
		while (x < WIDTH)
		{
            // Skip pixels based on resolution factor (render lower resolution)
            if ((x % resolution_factor != 0) || (y % resolution_factor != 0))
            {
                x++;
                continue;
            }

			// Calculate ray direction based on screen coordinates
			ray_dir.x = (2.0 * x / (double)WIDTH - 1.0) * tan(fractal->camera.fov * M_PI / 360.0) 
						* fractal->camera.aspect_ratio;
			ray_dir.y = (1.0 - 2.0 * y / (double)HEIGHT) * tan(fractal->camera.fov * M_PI / 360.0);
			ray_dir.z = 1.0;

			// Apply camera rotation
			ray_dir = rotate_point(ray_dir, fractal->camera.rotation);

			// Normalize ray direction
			double len = sqrt(ray_dir.x * ray_dir.x + ray_dir.y * ray_dir.y + ray_dir.z * ray_dir.z);
			ray_dir.x /= len;
			ray_dir.y /= len;
			ray_dir.z /= len;

			// Set ray origin at camera position
			ray_pos = fractal->camera.position;
			color = BLACK;

            // Check if we have a valid BVH 
            if (fractal->menger.iterations == 0)
            {
                // If iterations is 0, just render a simple cube
                t_aabb cube;
                cube.min = (t_vec3){-1.0, -1.0, -1.0};
                cube.max = (t_vec3){1.0, 1.0, 1.0};
                
                if (ray_intersect_aabb(cube, ray_pos, ray_dir, &t_min, &t_max) && t_min > 0)
                {
                    // Calculate hit point
                    t_vec3 hit_point = {
                        ray_pos.x + ray_dir.x * t_min,
                        ray_pos.y + ray_dir.y * t_min,
                        ray_pos.z + ray_dir.z * t_min
                    };
                    
                    // Calculate epsilon for face detection (avoid floating point issues)
                    double epsilon = 0.001;
                    
                    // Determine which face was hit by finding which coordinate is at the boundary
                    // Calculate normal by seeing which face we hit
                    t_vec3 normal = {0, 0, 0};
                    
                    if (fabs(hit_point.x - 1.0) < epsilon) {
                        normal.x = 1.0;  // Right face (+X)
                        color = 0xFF0000;  // Red
                    } 
                    else if (fabs(hit_point.x + 1.0) < epsilon) {
                        normal.x = -1.0;  // Left face (-X)
                        color = 0xAA0000;  // Dark red
                    }
                    else if (fabs(hit_point.y - 1.0) < epsilon) {
                        normal.y = 1.0;  // Top face (+Y)
                        color = 0x00FF00;  // Green
                    }
                    else if (fabs(hit_point.y + 1.0) < epsilon) {
                        normal.y = -1.0;  // Bottom face (-Y)
                        color = 0x00AA00;  // Dark green
                    }
                    else if (fabs(hit_point.z - 1.0) < epsilon) {
                        normal.z = 1.0;  // Front face (+Z)
                        color = 0x0000FF;  // Blue
                    }
                    else if (fabs(hit_point.z + 1.0) < epsilon) {
                        normal.z = -1.0;  // Back face (-Z)
                        color = 0x0000AA;  // Dark blue
                    }
                    else {
                        // This shouldn't happen, but just in case - yellow for debugging
                        color = 0xFFFF00;
                    }
                    
                    // Optional - add shading based on normal and view direction
                    double light_intensity = -ray_dir.x * normal.x - ray_dir.y * normal.y - ray_dir.z * normal.z;
                    
                    // Ensure light_intensity is positive (basic diffuse lighting)
                    if (light_intensity < 0.3)
                        light_intensity = 0.3;  // Ambient light minimum
                    
                    // Extract RGB components
                    int r = (color >> 16) & 0xFF;
                    int g = (color >> 8) & 0xFF;
                    int b = color & 0xFF;
                    
                    // Apply lighting
                    r = (int)(r * light_intensity);
                    g = (int)(g * light_intensity);
                    b = (int)(b * light_intensity);
                    
                    // Recombine
                    color = (r << 16) | (g << 8) | b;
                }
            }
            else if (fractal->menger.bvh_root)
            {
                // Use the BVH for raytracing the Menger sponge
                if (ray_intersect_bvh(fractal->menger.bvh_root, ray_pos, ray_dir, &t_min, &t_max) && t_min > 0)
                {
                    // Calculate hit point
                    t_vec3 hit_point = {
                        ray_pos.x + ray_dir.x * t_min,
                        ray_pos.y + ray_dir.y * t_min,
                        ray_pos.z + ray_dir.z * t_min
                    };
                    
                    // Calculate epsilon for face detection (avoid floating point issues)
                    double epsilon = 0.001;
                    
                    // Calculate surface normal based on which face was hit
                    t_vec3 normal = {0, 0, 0};
                    
                    // We determine which face by checking which coordinate is at the boundary
                    if (fabs(fmod(fabs(hit_point.x), 1.0/3.0)) < epsilon ||
                        fabs(fmod(fabs(hit_point.x), 1.0/3.0) - 1.0/3.0) < epsilon) {
                        normal.x = (hit_point.x > 0) ? 1.0 : -1.0;
                        color = (hit_point.x > 0) ? 0xFF0000 : 0xAA0000;  // Red faces
                    } 
                    else if (fabs(fmod(fabs(hit_point.y), 1.0/3.0)) < epsilon ||
                             fabs(fmod(fabs(hit_point.y), 1.0/3.0) - 1.0/3.0) < epsilon) {
                        normal.y = (hit_point.y > 0) ? 1.0 : -1.0;
                        color = (hit_point.y > 0) ? 0x00FF00 : 0x00AA00;  // Green faces
                    }
                    else if (fabs(fmod(fabs(hit_point.z), 1.0/3.0)) < epsilon ||
                             fabs(fmod(fabs(hit_point.z), 1.0/3.0) - 1.0/3.0) < epsilon) {
                        normal.z = (hit_point.z > 0) ? 1.0 : -1.0;
                        color = (hit_point.z > 0) ? 0x0000FF : 0x0000AA;  // Blue faces
                    }
                    else {
                        // Default color if we can't determine the face
                        color = 0xFFFF00;
                    }
                    
                    // Simple lighting based on normal and view direction
                    double light_intensity = -ray_dir.x * normal.x - ray_dir.y * normal.y - ray_dir.z * normal.z;
                    
                    // Ensure light_intensity is positive (basic diffuse lighting)
                    if (light_intensity < 0.3)
                        light_intensity = 0.3;  // Ambient light minimum
                    
                    // Extract RGB components
                    int r = (color >> 16) & 0xFF;
                    int g = (color >> 8) & 0xFF;
                    int b = color & 0xFF;
                    
                    // Apply lighting
                    r = (int)(r * light_intensity);
                    g = (int)(g * light_intensity);
                    b = (int)(b * light_intensity);
                    
                    // Recombine
                    color = (r << 16) | (g << 8) | b;
                }
            }
			
            // Fill a block of pixels for the low-res version
            for (int fill_y = 0; fill_y < resolution_factor && (y + fill_y) < HEIGHT; fill_y++) {
                for (int fill_x = 0; fill_x < resolution_factor && (x + fill_x) < WIDTH; fill_x++) {
                    pixel_put(x + fill_x, y + fill_y, &fractal->img, color);
                }
            }
			x += resolution_factor;
		}
		y += resolution_factor;
		// Update every row for more responsive feedback
		draw_image_to_window(fractal);
	}
	draw_image_to_window(fractal);
} 